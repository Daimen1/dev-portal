I"ì<h2 id="step-1-prerequisites">Step 1. Prerequisites</h2>

<p>This guide assumes youâ€™ve got a wallet, have installed the <code class="highlighter-rouge">snet</code> tool, and have successfully called a service.</p>

<h2 id="step-2-install-the-sdk">Step 2. Install the SDK</h2>

<p>Currently our SDK only supports Python 3.6+. In the future weâ€™ll support a wide variety of languages. We make use of protocol buffers and grpc,
so if you can find support for a language for both of those, then itâ€™s only matter of time before we (or the community! ;-) ) writes an SDK for it.</p>

<p><code class="highlighter-rouge">pip install snet-sdk</code> (check this is correct)</p>

<h2 id="step-3-write-some-code">Step 3. Write some code!</h2>

<p>Hereâ€™s an example of calling a service using the SDK</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">snet_sdk</span> <span class="kn">import</span> <span class="n">Snet</span>
<span class="n">snet</span> <span class="o">=</span> <span class="n">Snet</span><span class="p">(</span><span class="n">private_key</span><span class="o">=</span><span class="n">MY_PRIVATE_KEY</span><span class="p">,</span> <span class="n">eth_rpc_endpoint</span><span class="o">=</span><span class="s">"https://ropsten.infura.io"</span><span class="p">)</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">snet</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">"snet"</span><span class="p">,</span> <span class="s">"example-service"</span><span class="p">)</span>
<span class="n">stub</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">grpc</span><span class="o">.</span><span class="n">example_service_pb2_grpc</span><span class="o">.</span><span class="n">CalculatorStub</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">grpc_channel</span><span class="p">)</span>
<span class="n">calc_request</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">grpc</span><span class="o">.</span><span class="n">example_service_pb2</span><span class="o">.</span><span class="n">Numbers</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"The result is"</span><span class="p">,</span> <span class="n">stub</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">calc_request</span><span class="p">)</span><span class="o">.</span><span class="n">value</span><span class="p">))</span>
</code></pre></div></div>

<p>For anyone that has written grpc code before this will look somewhat familiar.</p>

<p>However, underneath the hood the SDK will fetch the model definition from IPFS, compile the code, set up payment channels,
and make the request for you.</p>

<p>This isnâ€™t done for every request. It will only do these steps if it doesnâ€™t have a local cache of a compiled model, and doesnâ€™t
already have an existing funded channel to use.</p>

<p>(TODO: Update once the SDK is released and finalised depending on how much is automated or not)</p>

<h2 id="step-4-the-simple-sdk">Step 4. The simple SDK</h2>

<p>The above is great for building well defined APIs with objects representing the messages being sent. Its also consistent with
how youâ€™d interact with any other grpc service.</p>

<p>However in a dynamic language like python it can feel a little clunky. Thatâ€™s why there is an alternative using the snet cli:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">snet_cli.call_stub_generator</span> <span class="kn">import</span> <span class="n">call_stub_generator</span>
<span class="n">add</span> <span class="o">=</span> <span class="n">call_stub_generator</span><span class="p">(</span><span class="s">"snet"</span><span class="p">,</span> <span class="s">"example-service"</span><span class="p">,</span> <span class="s">"add"</span><span class="p">)</span>
<span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="s">"a"</span><span class="p">:</span><span class="mi">20</span><span class="p">,</span> <span class="s">"b"</span><span class="p">:</span><span class="mi">30</span><span class="p">}</span>
<span class="n">rez</span> <span class="o">=</span> <span class="n">add</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">rez</span><span class="p">)</span>
</code></pre></div></div>

<p>This requires you to have the CLI set up, and will only ever be available for Python applications, but itâ€™s nice to have options.</p>
:ET