I"V<p>This example contains a Docker image and a number of simple application examples which demonstrate how to work with the SingularityNET platform.</p>

<p>For the sake of clarity and simplicity, we prepared an environment which
simulates the behaviour of the Kovan Ethereum testnet. All actions occur within your own instance of Ganache and doesnâ€™t affect any public networks.</p>

<p>Prerequisites:</p>
<ul>
  <li><a href="https://docs.docker.com/engine/installation/">Docker CE</a></li>
  <li><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">Git</a></li>
</ul>

<p>Hardware requirements:</p>
<ul>
  <li>1 Gb free RAM to run docker image</li>
  <li>4 Gb free disk space to keep docker image</li>
</ul>

<p>Clone repository:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/singnet/wiki
<span class="nb">cd </span>wiki/workshop/docker
</code></pre></div></div>

<p>Build docker image:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> singnet <span class="nb">.</span>
</code></pre></div></div>

<p>Run docker image with examples:</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./run.sh
</code></pre></div></div>

<p>After docker image is up you will be in the <code class="highlighter-rouge">singnet</code> folder which contains all
main SingularityNet git repositories and SingularityNet examples.</p>

<p>Please start with reading <code class="highlighter-rouge">examples/01-snet-cli/README</code> file and follow instructions.</p>

<h2 id="preparations-made-in-image">Preparations made in image</h2>

<p>What is done in the docker image:</p>

<ul>
  <li>local IPFS instance is deployed and started (see <a href="/docs/development/local-singularitynet#deploy-local-ipfs-instance">deploy local IPFS
instance</a>
and <a href="/docs/development/local-singularitynet#start-local-ipfs-instance">start local IPFS
instance</a></li>
  <li>Ganache instance is started with predefined network number and mnemonic to
generate predictable accounts numbers and private keys (see <a href="/docs/development/local-singularitynet#start-local-ethereum-network">start local
ethereum
network</a>);</li>
  <li>local network id is exported as <code class="highlighter-rouge">$NETWORK_ID</code> environment variable;</li>
  <li>all contracts are already deployed and their addresses are written to
<code class="highlighter-rouge">snet-cli</code> configuration and exported as environment variables:
<code class="highlighter-rouge">$TOKEN_ADDR</code>, <code class="highlighter-rouge">$REGISTRY_ADDR</code>, <code class="highlighter-rouge">$MULTIPARTYESCROW_ADDR</code>;</li>
  <li>local Ethereum node and IPFS instance are added into snet-cli configuration
<a href="/docs/development/local-singularitynet#setup-snet-command-line-interface">setup snet-cli
interface</a>;</li>
  <li>all addresses and private keys generated by Ganache are exported as
environment variables: <code class="highlighter-rouge">$DEPLOYER_ADDR</code>, <code class="highlighter-rouge">$DEPLOYER_KEY</code>, <code class="highlighter-rouge">$CALLER_ADDR</code>,
<code class="highlighter-rouge">$CALLER_KEY</code>, <code class="highlighter-rouge">$PUBLISHER_ADDR</code>, <code class="highlighter-rouge">$PUBLISHED_KEY</code>;</li>
  <li>couple of <code class="highlighter-rouge">snet-cli</code> identities are created: <code class="highlighter-rouge">deployer</code> and <code class="highlighter-rouge">caller</code>, which
are first and second identities generated by ganache-cli on start
respectively.</li>
</ul>

<p>In order to see full list of preparations you need to work with local Ethereum network you need to look at page <a href="/docs/development/local-singularitynet">build and deploy SingularityNET
locally</a>.</p>
:ET