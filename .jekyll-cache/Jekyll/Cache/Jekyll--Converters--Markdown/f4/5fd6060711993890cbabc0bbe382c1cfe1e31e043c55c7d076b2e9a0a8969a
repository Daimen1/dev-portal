I"80<hr />

<p><em>Before following this tutorial, make sure you’ve installed</em></p>

<ul>
  <li><em>Docker (<a href="https://www.docker.com/">https://www.docker.com/</a>)</em></li>
  <li><em>Metamask (<a href="https://www.docker.com/">https://metamask.io</a>)</em></li>
</ul>

<p><em>You will need a private-public key pair to register your service in SNET. Generate them in Metamask before you start this tutorial.</em></p>

<hr />

<p>Run this tutorial from a bash terminal.</p>

<p>We’ll use Go gRPC, for more details see https://grpc.io/docs/</p>

<p>In this tutorial we’ll create a Go service and publish it in SingularityNET.</p>

<h2 id="step-1">Step 1</h2>

<p>Setup a <code class="highlighter-rouge">ubuntu:18.04</code> docker container (with proper <code class="highlighter-rouge">SNET Daemon</code> version) using provided <code class="highlighter-rouge">Dockerfile</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SNETD_VERSION="v0.1.7"
docker build \
    --build-arg language=go \
    --build-arg snetd_version=$SNETD_VERSION \
    -t snet_go_service https://github.com/singnet/dev-portal.git#master:/tutorials/docker

ETCD_HOST=$HOME/.snet/etcd/example-go-service/
ETCD_CONTAINER=/opt/singnet/etcd/
docker run -p 7000:7000 -v $ETCD_HOST:$ETCD_CONTAINER -ti snet_go_service bash
</code></pre></div></div>

<p>From this point we follow the tutorial in the Docker container’s prompt.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd dev-portal/tutorials/go
</code></pre></div></div>

<h2 id="step-2">Step 2</h2>

<p>Create the skeleton structure for your service’s project</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./create_project.sh PROJECT_NAME ORGANIZATION_ID SERVICE_ID SERVICE_PORT
</code></pre></div></div>

<p><code class="highlighter-rouge">PROJECT_NAME</code> is a short tag for your project. It will be used to name
project’s directory and as a namespace tag in the .proto file.</p>

<p><code class="highlighter-rouge">ORGANIZATION_ID</code> is the id of an organization that you are a member or owner.</p>

<p><code class="highlighter-rouge">SERVICE_ID</code> is the id of your service.</p>

<p><code class="highlighter-rouge">SERVICE_PORT</code> is the port number (in localhost) the service will listen to.</p>

<p><code class="highlighter-rouge">create_project.sh</code> will create a directory named <code class="highlighter-rouge">PROJECT_NAME</code> with a basic
empty implementation of the service.</p>

<p>In this tutorial we’ll implement a service with two methods:</p>

<ul>
  <li>int div(int a, int b)</li>
  <li>string check(int a)</li>
</ul>

<p>So we’ll use this command line to create project’s skeleton</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./create_project.sh tutorial snet math-operations 7070
cd /opt/singnet/go/src/tutorial
</code></pre></div></div>

<h2 id="step-3">Step 3</h2>

<p>Now we’ll customize the skeleton code to actually implement our basic service.
We need to edit <code class="highlighter-rouge">./service_spec/tutorial.proto</code> and define</p>

<ul>
  <li>the data structures used to carry input and output of the methods, and</li>
  <li>the RPC API of the service.</li>
</ul>

<p>Take a look at https://developers.google.com/protocol-buffers/docs/overview to
understand everything you can do in the <code class="highlighter-rouge">.proto</code> file.</p>

<p>In this tutorial our <code class="highlighter-rouge">./service_spec/tutorial.proto</code> will be like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">syntax</span> <span class="p">=</span> <span class="s2">"proto3"</span><span class="p">;</span>

<span class="k">package</span> <span class="n">tutorial</span><span class="p">;</span>

<span class="n">message</span> <span class="n">IntPair</span> <span class="p">{</span>
    <span class="n">int32</span> <span class="n">a</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
    <span class="n">int32</span> <span class="n">b</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">message</span> <span class="n">SingleInt</span> <span class="p">{</span>
    <span class="n">int32</span> <span class="n">v</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">message</span> <span class="n">SingleString</span> <span class="p">{</span>
    <span class="k">string</span> <span class="n">s</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">service</span> <span class="n">ServiceDefinition</span> <span class="p">{</span>
    <span class="n">rpc</span> <span class="k">div</span><span class="p">(</span><span class="n">IntPair</span><span class="p">)</span> <span class="n">returns</span> <span class="p">(</span><span class="n">SingleInt</span><span class="p">)</span> <span class="p">{}</span>
    <span class="n">rpc</span> <span class="n">check</span><span class="p">(</span><span class="n">SingleInt</span><span class="p">)</span> <span class="n">returns</span> <span class="p">(</span><span class="n">SingleString</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Each <code class="highlighter-rouge">message</code> statement define a data structure used either as input or output
in the API. The <code class="highlighter-rouge">service</code> statement defines the RPC API itself.</p>

<h2 id="step-4">Step 4</h2>

<p>In order to actually implement our API we need to edit <code class="highlighter-rouge">server.go</code>.</p>

<p>Look for <code class="highlighter-rouge">SERVICE_API</code> and replace <code class="highlighter-rouge">doSomething()</code> by our actual API methods:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func (s *server) Div(ctx context.Context, in *pb.IntPair) (*pb.SingleInt, error) {
	return &amp;pb.SingleInt{V: in.A / in.B}, nil
}
func (s *server) Check(ctx context.Context, in *pb.SingleInt) (*pb.SingleString, error) {
	return &amp;pb.SingleString{S: fmt.Sprintf("%v", in.V)}, nil
}
</code></pre></div></div>
<h2 id="step-5">Step 5</h2>

<p>Now we’ll write a client to test our server locally (without using the
blockchain). Edit <code class="highlighter-rouge">client.go</code>.</p>

<p>Look for <code class="highlighter-rouge">TEST_CODE</code> and replace <code class="highlighter-rouge">doSomething()</code> implementation by our
testing code:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>func doSomething(conn *grpc.ClientConn) (*pb.SingleInt, error) {
	// Check the compiled proto file (.pb.go) to get this method name
	c := pb.NewServiceDefinitionClient(conn)
	// Set variables 'a' and 'b' to be sent to the server.
	var a int32 = 12
	var b int32 = 4
	if len(os.Args) &gt; 2 {
		if i, err := strconv.ParseInt(os.Args[1], 10, 32); err == nil {
			a = int32(i)
		}
		if i, err := strconv.ParseInt(os.Args[2], 10, 32); err == nil {
			b = int32(i)
		}
	}
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	r, err := c.Div(ctx, &amp;pb.IntPair{A: a, B: b})
	if err != nil {
		return nil, err
	} else {
	    return r, nil
    }
}
</code></pre></div></div>

<h2 id="step-6">Step 6</h2>

<p>To compile the protobuf file:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./build.sh
</code></pre></div></div>

<h2 id="step-7">Step 7</h2>

<p>To test our server locally (without using the blockchain)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./server &amp;
./client 12 4
</code></pre></div></div>

<p>You should have something like the following output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./server &amp;

# [1] 4217
# Server listening on 0.0.0.0:7070

./client 12 4
# 3
</code></pre></div></div>

<p>At this point you have successfully built a gRPC Go service. The executables can 
be used from anywhere inside the container (they don’t need anything from 
the installation directory) or outside the container if you have Go gRPC libraries installed.</p>

<p>The next steps in this tutorial will publish the service in SingularityNET.</p>

<h2 id="step-8">Step 8</h2>

<p>Now you must follow the <a href="https://dev.singularitynet.io/tutorials/publish/">publish</a>
tutorial to publish this service or use our script (next step).</p>

<p>You’ll also need a <code class="highlighter-rouge">SNET CLI</code> identity (check step 3 from <a href="https://dev.singularitynet.io/tutorials/publish/#step-3-setup-snet-cli-and-create-your-identity">publish</a> tutorial).</p>

<h2 id="step-9">Step 9</h2>

<p>First, make sure you killed the <code class="highlighter-rouge">server</code> process started in Step 7.</p>

<p>Then
publish and start your service:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./publishAndStartService.sh PAYMENT_ADDRESS
</code></pre></div></div>

<p>Replace <code class="highlighter-rouge">PAYMENT_ADDRESS</code> by your public key (wallet).</p>

<p>Example:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./publishAndStartService.sh 0x501e8c58E6C16081c0AbCf80Ce2ABb6b3f91E717
</code></pre></div></div>

<p>This will start the <code class="highlighter-rouge">SNET Daemon</code> and your service. If everything goes well you will 
see the blockchain transaction logs and then the following messages 
(respectively from: your service and <code class="highlighter-rouge">SNET Daemon</code>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># [blockchain log]
# Server listening on 0.0.0.0:7070
# [daemon initial log]
# INFO[0002] Blockchain is enabled: instantiate payment validation interceptor 
# INFO[0002]                                               PaymentChannelStorageClient="&amp;{ConnectionTimeout:5s RequestTimeout:3s Endpoints:[http://127.0.0.1:2379]}"
# INFO[0002] Default payment handler registered            defaultPaymentType=escrow
# DEBU[0002] starting daemon                              
</code></pre></div></div>

<p>You can double check if it has been properly published using</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>snet organization list-services snet
</code></pre></div></div>

<p>Optionally you can un-publish the service</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>snet service delete snet math-operations
</code></pre></div></div>

<p>Actually, since this is just a tutorial, you are expected to un-publish your
service as soon as you finish the tests.</p>

<p>Other <code class="highlighter-rouge">snet</code> commands and options (as well as their documentation) can be found 
<a href="https://github.com/singnet/snet-cli">here</a>.</p>

<h2 id="step-10">Step 10</h2>

<p>You can test your service making requests in command line:</p>

<p>The <code class="highlighter-rouge">openChannel.sh</code> script will open and initialize a new payment channel, it’ll 
output the new channel id (that will be used by <code class="highlighter-rouge">testServiceRequest.sh</code>):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./openChannel.sh

# [blockchain log]
# #channel_id
# 10
</code></pre></div></div>

<p>In this example the channel id is <code class="highlighter-rouge">10</code>.</p>

<p>Now you can run <code class="highlighter-rouge">testServiceRequest.sh VALUE_A VALUE_B</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./testServiceRequest.sh 12 4

# [blockchain log]
#   response:
#       v: 3
</code></pre></div></div>

<p>That’s it. Remember to delete your service as explained in Step 9.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>snet service delete snet math-operations
</code></pre></div></div>
:ET